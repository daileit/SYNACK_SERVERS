# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zg35wrQpBekzG1N_uqvEL4K_iZiWOtXD
"""

from matplotlib import pyplot
from PIL import Image
from numpy import asarray
from scipy.spatial.distance import cosine
from mtcnn.mtcnn import MTCNN
from keras_vggface.vggface import VGGFace
from keras_vggface.utils import preprocess_input
from keras import backend as K
import cv2
import decimal


def extract_face(pixels, required_size=(224, 224)):
    # pixels = pyplot.imread(filename)
    detector = MTCNN()
    results = detector.detect_faces(pixels)
    x1, y1, width, height = results[0]['box']
    x2, y2 = x1 + width, y1 + height
    face = pixels[y1:y2, x1:x2]
    image = Image.fromarray(face)
    image = image.resize(required_size)
    face_array = asarray(image)
    return face_array

# def draw_image_with_boxes(data, result_list):
# 	# data = pyplot.imread(filename)
# 	pyplot.imshow(data)
# 	ax = pyplot.gca()
# 	for result in result_list:
# 		x, y, width, height = result['box']
# 		rect = Rectangle((x, y), width, height, fill=False, color='red')
# 		ax.add_patch(rect)
# 		for value in result['keypoints'].items():
# 			dot = Circle(value, radius=2, color='red')
# 			ax.add_patch(dot)
# 	pyplot.show()

def detect_face(img):
    detector = MTCNN()
    results = detector.detect_faces(img)
    x1, y1, width, height = results[0]['box']
    x2, y2 = x1 + width, y1 + height
    face = img[y1:y2, x1:x2]
    return face

def get_embeddings(filenames):
    faces = [extract_face(f) for f in filenames]
    samples = asarray(faces, 'float32')
    samples = preprocess_input(samples, version=2)
    model = VGGFace(model='resnet50', include_top=False, input_shape=(224, 224, 3), pooling='avg')
    yhat = model.predict(samples)
    return yhat

def is_match(known_embedding, candidate_embedding, thresh=0.5):
    score = cosine(known_embedding, candidate_embedding)
    if score <= thresh:
        print('>face is Match (%.3f <= %.3f)' % (score, thresh))
        a = decimal.Decimal((1 - score/2.5)*100)
        rou = round(a, 2)
        print(rou, ' %')
        return rou
    else:
        print('>face is NOT Match (%.3f > %.3f)' % (score, thresh))
        a = decimal.Decimal((1 - score)/0.625*100)
        rou = round(a, 2)
        print(rou, ' %')
        return rou

def face_recognition(img1, img2):
    K.clear_session()
    filenames = [img1,img2 ]
    embeddings = get_embeddings(filenames) 
    result=is_match(embeddings[0], embeddings[1])
    K.clear_session()
    return result
# link_img1 = '../Read_IDCardVN/image/3.jpg'
# link_img2 = '../Read_IDCardVN/image/4.jpg'

# img1 = cv2.imread(link_img1)
# img2 = cv2.imread(link_img2)
# Output(img1, img2)